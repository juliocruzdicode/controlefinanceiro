#!/usr/bin/env python3
"""
Script de migra√ß√£o usando SQLAlchemy para adicionar sistema de contas
"""
from app import app, db
from models import Conta, TipoConta, Transacao, TransacaoRecorrente
from sqlalchemy import text

def migrar_database():
    """Migra o banco de dados para incluir sistema de contas"""
    with app.app_context():
        print("üîÑ Iniciando migra√ß√£o do banco de dados...")
        
        try:
            # 1. Criar todas as tabelas (incluindo a tabela conta)
            print("üìù Criando tabelas...")
            db.create_all()
            
            # 2. Verificar se j√° existem contas
            total_contas = Conta.query.count()
            if total_contas == 0:
                print("üíº Criando contas padr√£o...")
                contas_padrao = [
                    Conta(nome="Minha Conta", descricao="Conta principal", tipo=TipoConta.CORRENTE, cor="#007bff"),
                    Conta(nome="Conta da J√©ssica", descricao="Conta da J√©ssica", tipo=TipoConta.CORRENTE, cor="#28a745"),
                    Conta(nome="Conta do Gabriel", descricao="Conta do Gabriel", tipo=TipoConta.CORRENTE, cor="#17a2b8"),
                    Conta(nome="Dinheiro", descricao="Dinheiro f√≠sico", tipo=TipoConta.DINHEIRO, cor="#ffc107"),
                ]
                
                for conta in contas_padrao:
                    db.session.add(conta)
                
                db.session.commit()
                print("‚úÖ Contas padr√£o criadas!")
            else:
                print(f"‚ÑπÔ∏è  J√° existem {total_contas} contas no banco")
            
            # 3. Verificar se as colunas conta_id existem
            try:
                # Tentar executar uma query simples para verificar se a coluna existe
                db.session.execute(text("SELECT conta_id FROM transacao LIMIT 1"))
                print("‚ÑπÔ∏è  Coluna 'conta_id' j√° existe na tabela 'transacao'")
            except Exception as e:
                if "no such column" in str(e).lower():
                    print("üîÑ Adicionando coluna 'conta_id' na tabela 'transacao'...")
                    
                    # Adicionar coluna conta_id na tabela transacao
                    db.session.execute(text('ALTER TABLE transacao ADD COLUMN conta_id INTEGER'))
                    
                    # Obter ID da primeira conta para usar como padr√£o
                    primeira_conta = Conta.query.first()
                    if primeira_conta:
                        print(f"üìé Associando transa√ß√µes existentes √† conta: {primeira_conta.nome}")
                        db.session.execute(
                            text("UPDATE transacao SET conta_id = :conta_id WHERE conta_id IS NULL"),
                            {'conta_id': primeira_conta.id}
                        )
                        
                        # Contar transa√ß√µes atualizadas
                        result = db.session.execute(text("SELECT COUNT(*) FROM transacao WHERE conta_id = :conta_id"), 
                                                  {'conta_id': primeira_conta.id})
                        count = result.scalar()
                        print(f"‚úÖ {count} transa√ß√µes associadas √† conta padr√£o")
                    
                    db.session.commit()
                else:
                    raise e
            
            # 4. Verificar tabela transacao_recorrente
            try:
                db.session.execute(text("SELECT conta_id FROM transacao_recorrente LIMIT 1"))
                print("‚ÑπÔ∏è  Coluna 'conta_id' j√° existe na tabela 'transacao_recorrente'")
            except Exception as e:
                if "no such column" in str(e).lower():
                    print("üîÑ Adicionando coluna 'conta_id' na tabela 'transacao_recorrente'...")
                    
                    db.session.execute(text('ALTER TABLE transacao_recorrente ADD COLUMN conta_id INTEGER'))
                    
                    # Obter ID da primeira conta
                    primeira_conta = Conta.query.first()
                    if primeira_conta:
                        db.session.execute(
                            text("UPDATE transacao_recorrente SET conta_id = :conta_id WHERE conta_id IS NULL"),
                            {'conta_id': primeira_conta.id}
                        )
                        
                        result = db.session.execute(text("SELECT COUNT(*) FROM transacao_recorrente WHERE conta_id = :conta_id"), 
                                                  {'conta_id': primeira_conta.id})
                        count = result.scalar()
                        print(f"‚úÖ {count} transa√ß√µes recorrentes associadas √† conta padr√£o")
                    
                    db.session.commit()
                else:
                    raise e
            
            # Estat√≠sticas finais
            total_contas = Conta.query.count()
            total_transacoes = Transacao.query.count()
            total_recorrentes = TransacaoRecorrente.query.count()
            
            print(f"\nüìä Estat√≠sticas finais:")
            print(f"   - Contas: {total_contas}")
            print(f"   - Transa√ß√µes: {total_transacoes}")
            print(f"   - Transa√ß√µes recorrentes: {total_recorrentes}")
            
            print("\n‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante migra√ß√£o: {e}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    print("üè¶ Sistema de Contas - Migra√ß√£o do Banco de Dados")
    print("=" * 50)
    
    sucesso = migrar_database()
    
    if sucesso:
        print("\nüéâ Migra√ß√£o conclu√≠da! O sistema de contas est√° pronto para uso.")
        print("\nPr√≥ximos passos:")
        print("1. Execute a aplica√ß√£o: python app.py")
        print("2. Acesse o menu 'Contas' para gerenciar suas contas")
        print("3. Ao criar novas transa√ß√µes, selecione a conta desejada")
    else:
        print("\n‚ùå Migra√ß√£o falhou. Verifique os erros acima.")
