#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar se a gera√ß√£o de transa√ß√µes recorrentes est√° funcionando
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar a aplica√ß√£o Flask e os modelos
from app import app
from models import db, TransacaoRecorrente, TipoRecorrencia, StatusRecorrencia, TipoTransacao, Transacao, Usuario, Categoria, Conta
from datetime import datetime, timedelta
from models import TransacaoRecorrente, TipoRecorrencia, StatusRecorrencia, TipoTransacao, Transacao, Usuario, Categoria, Conta

def testar_geracao_recorrentes():
    """Testa a gera√ß√£o de transa√ß√µes recorrentes"""
    with app.app_context():
        try:
            print("üß™ Iniciando teste de gera√ß√£o de transa√ß√µes recorrentes...")
            
            # Primeiro, limpar transa√ß√µes recorrentes existentes para o teste
            usuario = Usuario.query.filter_by(email='teste@teste.com').first()
            
            if not usuario:
                print("‚ö†Ô∏è Criando usu√°rio de teste...")
                usuario = Usuario(
                    nome='Usu√°rio Teste',
                    email='teste@teste.com',
                    senha_hash='123456'  # N√£o √© seguro, apenas para teste
                )
                db.session.add(usuario)
                db.session.commit()
            
            # Verificar se existem categorias e contas para o teste
            categoria = Categoria.query.filter_by(user_id=usuario.id).first()
            if not categoria:
                print("‚ö†Ô∏è Criando categoria de teste...")
                categoria = Categoria(
                    nome='Categoria Teste',
                    user_id=usuario.id
                )
                db.session.add(categoria)
                db.session.commit()
            
            conta = Conta.query.filter_by(user_id=usuario.id).first()
            if not conta:
                print("‚ö†Ô∏è Criando conta de teste...")
                conta = Conta(
                    nome='Conta Teste',
                    saldo_inicial=1000,
                    user_id=usuario.id
                )
                db.session.add(conta)
                db.session.commit()
            
            # Limpar transa√ß√µes recorrentes existentes do usu√°rio de teste
            TransacaoRecorrente.query.filter_by(user_id=usuario.id).delete()
            db.session.commit()
            
            # Criar uma nova transa√ß√£o recorrente para teste
            hoje = datetime.utcnow()
            data_inicio = hoje - timedelta(days=30)  # 30 dias atr√°s
            
            recorrente = TransacaoRecorrente(
                descricao='Transa√ß√£o Teste Recorrente',
                valor=100.00,
                tipo=TipoTransacao.DESPESA,
                data_inicio=data_inicio,
                tipo_recorrencia=TipoRecorrencia.MENSAL,
                status=StatusRecorrencia.ATIVA,
                is_parcelada=False,
                categoria_id=categoria.id,
                conta_id=conta.id,
                user_id=usuario.id
            )
            
            db.session.add(recorrente)
            db.session.commit()
            
            print(f"‚úÖ Transa√ß√£o recorrente criada com ID: {recorrente.id}")
            
            # Gerar transa√ß√µes pendentes
            transacoes_geradas = recorrente.gerar_transacoes_pendentes()
            
            print(f"‚úÖ {len(transacoes_geradas)} transa√ß√µes geradas com sucesso")
            
            # Verificar se as transa√ß√µes foram criadas corretamente
            for idx, transacao in enumerate(transacoes_geradas):
                print(f"  üìù Transa√ß√£o #{idx+1}: ID={transacao.id}, Descri√ß√£o={transacao.descricao}, user_id={transacao.user_id}")
                if transacao.user_id is None:
                    print("‚ùå ERRO: user_id √© None! O problema persiste.")
                    return False
            
            print("‚úÖ Todas as transa√ß√µes t√™m user_id definido corretamente")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante o teste: {str(e)}")
            return False

if __name__ == '__main__':
    # Configurar o ambiente de teste
    os.environ['FLASK_ENV'] = 'development'
    
    # Executar o teste
    resultado = testar_geracao_recorrentes()
    
    if resultado:
        print("‚úÖ Teste conclu√≠do com sucesso! O problema foi resolvido.")
    else:
        print("‚ùå Teste falhou! O problema pode persistir.")
